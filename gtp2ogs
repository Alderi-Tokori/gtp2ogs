#!/usr/bin/python2

# This script enables Go playing bots that support GTP (Go Text Protocol)  
# to play on the OGS (Online-Go.com Server).
#
# Dependencies:
#     socketIO-client
#           pip install -U socketIO-client 
#        or easy_install -U socketIO-client
#
#
# Basic usage:
#    ./gtp2ogs --botid <id> --apikey <apikey> <command> <arguments>
#

import os, sys, re, subprocess
import traceback
import argparse
import urllib, urllib2
import json
import hashlib
import time
import random
import logging

iolog = logging.getLogger("socketIO_client")
iolog.setLevel(logging.WARNING) # The socket io library is really noisy

import socketIO_client
from socketIO_client import SocketIO


VERSION="0.1"
DEBUG=False
GGSHOST='ggs.online-go.com' # set by CLI parameters
RESTHOST='online-go.com'    # set by CLI parameters

ignorable_notifications = [
    'gameStarted',
    'gameEnded',
    'gameDeclined',
    'gameResumedFromStoneRemoval',
    'tournamentStarted',
    'tournamentEnded',
]

# Utility code {{{
def post(path, obj):
    arr = [] 
    for k in obj.keys():
        arr.append((k, obj[k]))
    req = urllib2.Request('http://' + RESTHOST + ('/' if path[0] != '/' else '') + path, urllib.urlencode(arr))
    handle = urllib2.urlopen(req)
    ret =handle.read()
    return ret

def char2num(ch):
    if ch == ".":
        return -1;
    return "abcdefghijklmnopqrstuvwxyz".index(ch);

def num2char(num):
    if num == -1:
        return ".";
    return "abcdefghijklmnopqrstuvwxyz"[num];

def gtpchar2num(ch):
    if ch == ".":
        return -1;
    return "abcdefghjklmnopqrstuvwxyz".index(ch);

def num2gtpchar(num):
    if num == -1:
        return ".";
    return "abcdefghjklmnopqrstuvwxyz"[num];

def encodeMove(move):
    if move['x'] == -1:
        return "..";
    return num2char(move['x']) + num2char(move['y'])

def gtpEncodeMove(move):
    if move['x'] == -1:
        return "pass";
    return gtpnum2char(move['x']) + gtpnum2char(move['y'])

def move2gtpvertex(move):
    if move['x'] < 0:
        return "pass"
    return "%s%d" % (num2gtpchar(move['x']), 19-move['y'])

# }}}

class GTP: # {{{
    def __init__(self, command, arguments):
        self.cmd = command
        self.arguments = arguments
        self.proc = subprocess.Popen(
                [self.cmd] + self.arguments,
                stdout=subprocess.PIPE,
                stdin=subprocess.PIPE,
                shell=False)

    def command(self, cmd):
        if (DEBUG and "play" not in cmd):
            print(">>> " + cmd)
        self.proc.stdin.write(cmd + "\n")
        while True:
            result = self.proc.stdout.readline()
            if result.strip() == "":
                continue
            if result[0] == '=':
                l = 'foo';
                while l.strip() != '':
                    l = self.proc.stdout.readline()
                    if l.strip() != '':
                        print(l.rstrip())

                return result
            raise Exception("Error executing %s: %s" % (cmd, result))

# }}}

class Game: # {{{
    def __init__(self, gamedata):
        self.gamedata = gamedata
        self.initial_player = 1 if gamedata['initial_player'] == 'black' else 2
        self.initial_state = {
                'black': self.decodeMoves(gamedata['initial_state']['black']),
                'white':self.decodeMoves(gamedata['initial_state']['white'])
        }
        self.moves = self.decodeMoves(gamedata['moves'])
        self.allow_self_capture = gamedata['allow_self_capture']
        self.width = gamedata['width']
        self.height = gamedata['height']
        self.height = gamedata['height']
        self.komi = gamedata['komi']
        self.handicap = gamedata['handicap']
        self.phase = gamedata['phase']
        self.free_handicap_placement = gamedata['free_handicap_placement']

    def move(self, move):
        self.moves.append(self.decodeMoves(move['move']))

    def decodeMoves(self, move_string):
        ret = ""
        pos = 0
        moves = []
        while pos < len(move_string):
            if move_string[pos] == '!':
                c = int(move_string[pos+1])
                pos += 2
                moves.append({'edited': True, 'color': c, 'x': char2num(move_string[pos]), 'y': char2num(move_string[pos+1])})
            else:
                moves.append({'edited': False,  'x': char2num(move_string[pos]), 'y': char2num(move_string[pos+1])})
            pos += 2
        return moves

    def genmove(self, gtp_process):
        gtp = gtp_process
        try:
            gtp.command("boardsize %d" % self.width)
            gtp.command("clear_board")

            # Setup handicap / initial state
            if len(self.initial_state['black']) > 0:
                s = ""
                for move in self.initial_state['black']:
                    s += " %s" % move2gtpvertex(move)
                gtp.command("set_free_handicap %s" % s.strip())

            for move in self.initial_state['white']: # white doesn't have a handicap placement, so we just do moves instead
                gtp.command("play white %s" % move2gtpvertex(move))

            # Replay moves made
            color = self.initial_player
            handicaps_left = self.handicap
            for move in self.moves:
                c = color
                if move['edited']:
                    c = move['color']
                else:
                    if self.free_handicap_placement and handicaps_left > 1:
                        handicaps_left-=1
                    else:
                        color = 2 if color == 1 else 1
                gtp.command("play %s %s" % ('black' if c == 1 else 'white', move2gtpvertex(move)))

            # Ask the engine to give us a new move
            m = gtp.command("genmove %s" % ('black' if color == 1 else 'white'))
            coords = (m[1:].lower()).strip()
            resign=False
            if (coords == "resign"):
                x = -100
                y = -100
                resign=True
            elif (coords == "pass"):
                x = -1
                y = -1
            else:
                x = gtpchar2num(coords[0])
                y = 19-int(coords[1:])
        except Exception, e:
            print("Exception caught:");
            print(e)
            print("Resigning game because of error");
            x = -100
            y = -100
            resign=True

        #gtp.command("showboard")
        return {'x': x, 'y': y, 'resign': resign}

# }}}

class GTP2OGS: # {{{
    def __init__(self, ggshost, resthost, bot_id, apikey,  command, arguments):
        self.ggshost = ggshost
        self.resthost = resthost
        self.port = 3080
        self.bot_id = bot_id
        self.apikey = apikey
        self.command = command
        self.arguments = arguments
        self.registered_games = {}
        self.current_timecop_clock = None

        self.gtp = GTP(self.command, self.arguments)
        self.connectLoop()


    def run(self):
        while True:
            self.socket.wait(seconds=0.5)
            if self.socket._listenerThread.done.is_set():
                print("Disconnected");
                self.connectLoop()


    def connectLoop(self):
        while True:
            try:
                self._connect()
                return
            except Exception, e:
                print(e)
                traceback.print_exc()
                pass
            t = random.random()*10 + 3;
            print("Connection failed.. retrying in %.2f seconds" % t)
            time.sleep(t)

    def setBotId(self, v):
        self.bot_id  = v

    def _connect(self):
        print("Connecting to %s:%d" % (self.ggshost, self.port))
        self.registered_games = {}

        socket = self.socket = SocketIO(self.ggshost, self.port)
        socket.on('connect', self.onConnect)
        socket.on('error', self.onError)
        socket.on('notification', self.onNotification)
        socket.emit('botGetID', {'id': self.bot_id}, self.setBotId);
        socket.emit('connectToNotifications', self.genAuth({}))


    def genAuth(self, obj):
        obj['apikey'] = self.apikey
        obj['bot_id'] = self.bot_id
        return obj


    def onConnect(self):
        print("Connection established");

    def onGameData(self, gamedata):
        game = Game(gamedata)
        if game.phase == "play":
            if self.current_timecop_clock:
                if self.current_timecop_clock["current_player"] != self.bot_id:
                    print("!!!!! Timecop was backwards: %s vs %s " % \
                            (str(self.current_timecop_clock["current_player"]),
                                str(self.bot_id)))
                    print(repr(self.current_timecop_clock))
                    raise Exception("Bad timecop");

            mv = game.genmove(self.gtp)
            if mv['resign']:
                self.socket.emit('resign', self.genAuth({
                    'game_id': gamedata['game_id'],
                }))
            else:
                self.socket.emit('move', self.genAuth({
                    'game_id': gamedata['game_id'],
                    'move': encodeMove(mv)
                }))
        elif game.phase == "stone removal":
            print("Auto-accepting stones in stone removal phase");
            self.socket.emit('acceptRemovedStones', self.genAuth({
                'game_id': gamedata['game_id'],
                'stones': '--accept-any--'
            }))
        elif game.phase == "finished":
            pass
        else:
            print("Invalid game phase: %s" % game.phase)

        # TODO: We're only doing this because we're being lazy and just requesting
        # the whole game object every time we need to make a move instead of keeping
        # state like we should. Later we should remove this and bind into onMove
        # so we can keep the engine's warmed up without having to reset them every move
        self.socket.emit('disconnectFromGame', { 'game_id': gamedata['game_id'] })

    def onMove(self, move):
        # Tying into this would allow us to keep the game state intact, but
        # we're not going to worry about it just now.. for now we'll just 
        # reset the state every time we need to generate a move
        pass

    def nop(self, data):
        pass

    def onNotification(self, notification):
        socket = self.socket
        if notification['type'] == 'challenge':
            # TODO: Must reject games that are not square, or use an extension
            #       for playing non-square games
            rules = notification['rules']
            reject = None
            if not(rules == 'japanese' or rules == 'aga' or rules == 'chinese' or rules == 'korean'):
                reject = "rules were %s, not expected japanese, aga, chinese, or korean" % rules
            if notification['width'] != notification['height']:
                reject = "board was not square"

            if not reject:
                print("Accepting challenge %d"  % notification['game_id'])
                ret = post('/bot/acceptGame', self.genAuth({
                    'game_id': notification['game_id'],
                }))
            else:
                print("Rejecting challenge %d because %s"  % (notification['game_id'], reject))
                ret = post('/bot/declineGame', self.genAuth({
                    'game_id': notification['game_id'],
                }))
        elif notification['type'] == 'yourMove':
            #print("Turn notification for game %d" % notification['game_id'])
            game_id = notification['game_id']
            if game_id not in self.registered_games:
                socket.on('gamedata %d' % game_id, self.onGameData)
                socket.on('mv %d' % game_id, self.onMove)
                socket.on('setGameClock %d' % game_id, self.nop)
                socket.on('move %d' % game_id, self.nop) # wont need these soon
                socket.on('acceptRemovedStones %d' % game_id, self.nop) # wont need these soon
                socket.on('move', self.nop) # wont need these soon
                self.registered_games[game_id] = game_id
            socket.emit('connectToGame', self.genAuth({
                'game_id': game_id,
                }))
        elif notification['type'] in ignorable_notifications:
            self.delNotification(notification)
        elif notification['type'] == 'delete':
            pass
        else:
            print("Unhandled notification [%s]" % notification['type']);


    def delNotification(self, notification_id):
        if type(notification_id) is dict:
            notification_id = notification_id['id']

        print("Deleting notification %s" % notification_id)

        self.socket.emit('delNotification', self.genAuth({
            'notification_id': notification_id
        }))

    def onError(self, something):
        print("ERROR: %s" % something);

# }}}

if __name__=='__main__': # {{{
    print("OGS GTP Wrapper version %s" % VERSION)

    parser = argparse.ArgumentParser(description="OGS GTP Wrapper")
    parser.add_argument('--ggshost', dest='ggshost', default='ggs.online-go.com',
                        help='Hostname of the OGS GGS API server you\'re connecting to')
    parser.add_argument('--resthost', dest='resthost', default='online-go.com',
                        help='Hostname of the OGS REST API server you\'re connecting to')
    parser.add_argument('--beta', action='store_true', dest='beta', default=False,
                        help='Connect to the beta server (beta.online-go.com) this sets ggshost and resthost appropriately')
    parser.add_argument('--botid', dest='bot_id',
                        help='User id for the bot')
    parser.add_argument('--apikey', dest='apikey',
                        help='API Key for the bot')
    parser.add_argument('command', help='Bot executable')
    parser.add_argument('args', nargs=argparse.REMAINDER, help='Arguments for the bot executable')
    args = parser.parse_args()


    if args.beta:
        args.ggshost = 'ggsbeta.online-go.com'
        args.resthost = 'beta.online-go.com'

    GGSHOST=args.ggshost
    RESTHOST=args.resthost

    if not args.apikey:
        print("Missing --apikey argument")
    elif not args.bot_id:
        print("Missing --botid argument")
    else:
        p = GTP2OGS(
                ggshost=args.ggshost,
                resthost=args.resthost,
                bot_id=args.bot_id,
                apikey=args.apikey,
                command=args.command,
                arguments=args.args)
        p.run()

# }}}
